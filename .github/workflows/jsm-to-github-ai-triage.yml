name: "JSM SD to GitHub Issue + AI Triage (agent-ready, read-only)"

on:
  repository_dispatch:
    types: [jsm_ticket_created]
  workflow_dispatch:
    inputs:
      issue_key:
        description: "JSM key (e.g. SD-1)"
        required: false
        type: string

concurrency:
  group: jsm-${{ github.event.client_payload.issue_key || github.event.inputs.issue_key || 'manual' }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  models: read

env:
  TZ: America/Mexico_City
  JIRA_BASE_URL: https://appix.atlassian.net

jobs:
  ingest-triage:
    runs-on: ubuntu-latest
    timeout-minutes: 18

    steps:
      - name: "Checkout (read-only)"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: "Debug payload"
        uses: actions/github-script@v7
        with:
          script: |
            core.info(`event: ${context.eventName}`);
            core.info(JSON.stringify(context.payload, null, 2));

      - name: "Read JSM ticket (SD-xxxx)"
        id: jsm
        shell: bash
        env:
          JIRA_EMAIL:     ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY:      ${{ github.event.client_payload.issue_key }}
          INPUT_ISSUE_KEY: ${{ github.event.inputs.issue_key }}
        run: |
          set -euo pipefail
          ISSUE_KEY="${ISSUE_KEY:-${INPUT_ISSUE_KEY:-}}"
          test -n "${ISSUE_KEY:-}" || { echo "Missing issue_key"; exit 1; }

          AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"

          curl -fsS \
            -H "Authorization: Basic $AUTH" \
            -H "Accept: application/json" \
            "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY?expand=renderedFields&fields=summary,description,priority,reporter,attachment,issuetype,project" \
            > issue.json

          jq -re '.fields' issue.json >/dev/null

          {
            echo "issue_key=$ISSUE_KEY"
            echo "summary=$(jq -r '.fields.summary' issue.json)"
            echo "priority=$(jq -r '.fields.priority.name // \"Unspecified\"' issue.json)"
            echo "reporter=$(jq -r '.fields.reporter.displayName // \"Unknown\"' issue.json)"
            echo "project=$(jq -r '.fields.project.key' issue.json)"
            echo "type=$(jq -r '.fields.issuetype.name' issue.json)"
          } >> "$GITHUB_OUTPUT"

          jq -r '.renderedFields.description // ""' issue.json > description.html
          jq -r '.fields.attachment // [] | .[] | [.filename,.content] | @tsv' issue.json > attachments.tsv || true

      - name: "Fix relative links in description (avoid 404)"
        run: |
          set -euo pipefail
          sed -E "s#(src|href)=\"\/#\\1=\"${JIRA_BASE_URL}/#g" description.html > description_fixed.html

      - name: "Build attachment list (JSM links)"
        run: |
          set -euo pipefail
          if [ -s attachments.tsv ]; then
            while IFS=$'\t' read -r NAME URL; do
              printf -- "- [%s](%s)\n" "$NAME" "$URL"
            done < attachments.tsv > attachments.md
          else
            printf "_Sin adjuntos_\n" > attachments.md
          fi

      - name: "Load ops context (ops/context.md)"
        run: |
          set -euo pipefail
          if [ -f "ops/context.md" ]; then
            cp ops/context.md ops_context.md
          else
            printf "%s\n" "No hay contexto adicional (ops/context.md ausente)." > ops_context.md
          fi

      - name: "Create GitHub Issue"
        id: gh_issue
        uses: actions/github-script@v7
        env:
          ISSUE_KEY: ${{ steps.jsm.outputs.issue_key }}
          SUMMARY:   ${{ steps.jsm.outputs.summary }}
          PROJECT:   ${{ steps.jsm.outputs.project }}
          TYPE:      ${{ steps.jsm.outputs.type }}
          PRIORITY:  ${{ steps.jsm.outputs.priority }}
          REPORTER:  ${{ steps.jsm.outputs.reporter }}
        with:
          script: |
            const fs = require('fs');
            const descHtml = fs.readFileSync('description_fixed.html','utf8');
            const atts = fs.readFileSync('attachments.md','utf8');
            const body = [
              '### Origen: Jira Service Management (SD)',
              `- **Ticket:** [${process.env.ISSUE_KEY}](${process.env.JIRA_BASE_URL}/browse/${process.env.ISSUE_KEY})`,
              `- **Proyecto/Tipo:** ${process.env.PROJECT} / ${process.env.TYPE}`,
              `- **Prioridad (JSM):** ${process.env.PRIORITY}`,
              `- **Reportado por:** ${process.env.REPORTER}`,
              '',
              '### Descripcion (JSM renderizada)',
              `<details><summary>Ver</summary>\n\n${descHtml}\n\n</details>`,
              '',
              '### Adjuntos',
              atts,
              '',
              '> Generado automaticamente desde JSM (SD).'
            ].join('\n');
            const title = `[${process.env.ISSUE_KEY}] ${process.env.SUMMARY}`;
            const { data } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['from-jsm','triage','agent-ready']
            });
            core.setOutput('number', data.number);

      - name: "SLA: labels and deadlines (biz hours CDMX)"
        uses: actions/github-script@v7
        env:
          PRIORITY: ${{ steps.jsm.outputs.priority }}
          ISSUE_NUMBER: ${{ steps.gh_issue.outputs.number }}
          TZ: America/Mexico_City
        with:
          script: |
            function addBizHours(hours) {
              const tz = process.env.TZ || 'America/Mexico_City';
              const isBizDay = d => { const w = d.getDay(); return w >= 1 && w <= 5; };
              const start = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));
              const setHour = (d, h) => { d.setHours(h, 0, 0, 0); return d; };
              let d = start;
              if (d.getHours() < 9) d = setHour(d, 9);
              if (d.getHours() >= 18) { do { d.setDate(d.getDate() + 1); } while (!isBizDay(d)); d = setHour(d, 9); }
              let remaining = hours;
              while (remaining > 0) {
                if (!isBizDay(d)) { do { d.setDate(d.getDate() + 1); } while (!isBizDay(d)); d = setHour(d, 9); continue; }
                const todayLeft = 18 - d.getHours();
                const step = Math.min(remaining, todayLeft);
                d.setHours(d.getHours() + step);
                remaining -= step;
                if (remaining > 0) { do { d.setDate(d.getDate() + 1); } while (!isBizDay(d)); d = setHour(d, 9); }
              }
              return d;
            }
            const pri = (process.env.PRIORITY || '').toUpperCase();
            const map = { 'P1': { resp: 3, res: 5 }, 'P2': { resp: 6, res: 8 }, 'P3': { resp: 9, res: 27 } };
            const sev = pri.includes('CRIT') ? 'P1' : (pri.includes('ALTA') ? 'P2' : 'P3');
            const deadlines = map[sev];
            const respBy = addBizHours(deadlines.resp);
            const resoBy = addBizHours(deadlines.res);
            const fmt = d => new Intl.DateTimeFormat('es-MX', { timeZone: process.env.TZ, dateStyle: 'medium', timeStyle: 'short' }).format(d);
            await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: Number(process.env.ISSUE_NUMBER), labels: [`sev:${sev}`] });
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: Number(process.env.ISSUE_NUMBER),
              body: `**SLA (horas habiles CDMX)**\n- Respuesta (${sev}): ${deadlines.resp}h -> **${fmt(respBy)}**\n- Resolucion (${sev}): ${deadlines.res}h -> **${fmt(resoBy)}**`
            });

      # ------ Contexto del repo para el agente (ligero y seguro) ------
      - name: "Build repo context (tree + keyword matches)"
        id: repocontext
        shell: bash
        env:
          SUMMARY: ${{ steps.jsm.outputs.summary }}
        run: |
          set -euo pipefail
          PLAIN_DESC="$(sed -E 's/<[^>]+>//g' description_fixed.html | tr -d '\r')"
          TOKENS="$(printf "%s\n%s\n" "${SUMMARY:-}" "${PLAIN_DESC:-}" | tr '[:upper:]' '[:lower:]' | tr -cs '[:alnum:]' '\n' | awk 'length>2' | sort -u | head -n 20 | paste -sd'|' -)"
          : "${TOKENS:=.}"

          echo "### Repo tree (top 200)" > repo_context.md
          (git ls-files 2>/dev/null || find . -type f) | head -n 200 >> repo_context.md

          echo -e "\n### Keyword pattern\n${TOKENS}\n" >> repo_context.md
          echo "### Matches (first 200 lines across source files)" >> repo_context.md

          find . -type d \( -name .git -o -name node_modules -o -name dist -o -name build \) -prune -o \
            -type f \( -name "*.js" -o -name "*.ts" -o -name "*.tsx" -o -name "*.jsx" -o -name "*.php" -o -name "*.html" -o -name "*.css" -o -name "*.scss" -o -name "*.vue" -o -name "*.json" -o -name "*.md" \) \
            -print0 | xargs -0 -I{} sh -c 'grep -n -i -E "$0" "{}" | head -n 3' "${TOKENS}" | head -n 200 >> repo_context.md || true

          # Comandos del proyecto (package.json/composer.json si existen)
          {
            echo ""
            echo "### Project commands"
            if [ -f package.json ]; then
              echo "\`\`\`json"
              jq -r '.scripts // {}' package.json
              echo "\`\`\`"
            fi
            if [ -f composer.json ]; then
              echo "\`\`\`json"
              jq -r '.scripts // {}' composer.json
              echo "\`\`\`"
            fi
          } >> repo_context.md

      # ------------------- Triage inicial con modelos ------------------
      - name: "Prepare prompt for AI"
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "### Descripcion (HTML)"; cat description_fixed.html
            echo; echo "### Adjuntos"; cat attachments.md
            echo; echo "### Contexto operativo"; cat ops_context.md
            echo; echo "### Repo context"; cat repo_context.md
            echo; echo "### SLA"; echo "- L-V 09:00-18:00 (CDMX). P1: resp<=3h/reso<=5h; P2: <=6h/<=8h; P3: <=9h/<=27h"
            echo; echo "### Labels permitidas"; echo "bug, documentation, duplicate, enhancement, good first issue, help wanted, invalid, question, wontfix"
          } > prompt.md

      - name: "AI analysis (GitHub Models)"
        id: ai
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o-mini
          system-prompt: |
            Eres un ingeniero de soporte senior. Devuelve EXACTAMENTE estas secciones en Markdown:
            ## Posible causa
            ## Solucion potencial
            ## Requisitos adicionales para replicar
            ## Clasificacion (Bug vs Cambio)
            ## Riesgos/Infra (WAF/VPN/Server)
            Al final agrega un bloque ```json``` con:
            {"cause":"...","solution":"...","replication_requirements":["..."],"classification":"bug|change","risk_notes":"...","labels":["bug","question"]}
            Elige labels UNICAMENTE de:
            ["bug","documentation","duplicate","enhancement","good first issue","help wanted","invalid","question","wontfix"].
          prompt-file: prompt.md
          max-tokens: 800

      - name: "Post AI comment in Issue"
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ steps.gh_issue.outputs.number }}
          AI_MD_FILE:   ${{ steps.ai.outputs.response-file }}
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync(process.env.AI_MD_FILE,'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.ISSUE_NUMBER),
              body
            });

      - name: "Extract JSON for checklist and labels"
        id: parse_ai
        shell: bash
        run: |
          set -euo pipefail
          awk '/```json/{flag=1;next}/```/{flag=0}flag' "${{ steps.ai.outputs.response-file }}" > ai.json || true
          jq -e . ai.json >/dev/null 2>&1 || echo '{}' > ai.json
          echo "json=$(cat ai.json | jq -c .)" >> "$GITHUB_OUTPUT"

      - name: "Apply AI labels (existing only)"
        if: ${{ steps.parse_ai.outputs.json != '' }}
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ steps.gh_issue.outputs.number }}
          AI_JSON: ${{ steps.parse_ai.outputs.json }}
        with:
          script: |
            const payload = JSON.parse(process.env.AI_JSON || '{}');
            const wanted = Array.isArray(payload.labels) ? payload.labels : [];
            const { data: repoLabels } = await github.rest.issues.listLabelsForRepo({ owner: context.repo.owner, repo: context.repo.repo, per_page: 200 });
            const existing = new Set(repoLabels.map(l => l.name.toLowerCase()));
            const toApply = [...new Set(wanted.map(s => String(s).trim()))].filter(Boolean).filter(s => existing.has(s.toLowerCase()));
            if (toApply.length) {
              await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: Number(process.env.ISSUE_NUMBER), labels: toApply });
            }

      # -------------- Comentario Agent-Ready para el Coding Agent ---------------
      - name: "Post Agent-Ready brief"
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ steps.gh_issue.outputs.number }}
          SUMMARY:      ${{ steps.jsm.outputs.summary }}
          ISSUE_KEY:    ${{ steps.jsm.outputs.issue_key }}
        with:
          script: |
            const fs = require('fs');
            const repoCtx = fs.readFileSync('repo_context.md','utf8');
            const body = [
              '> ### Agent-Ready Brief',
              '',
              '**Objective**',
              `- Address JSM ticket ${process.env.ISSUE_KEY}: ${process.env.SUMMARY}`,
              '',
              '**Constraints**',
              '- Do not push to default branch. Open a PR with a clear plan.',
              '- Keep changes minimal and scoped. Explain trade-offs.',
              '- No external network calls except package registries allowed by repo policy.',
              '- Respect Hostinger/LSWS, WAF/CDN rules and caching notes in ops/context.md.',
              '',
              '**Acceptance Criteria (edit as needed)**',
              '- Reproduce the issue locally or describe why not reproducible.',
              '- Implement fix or content change + tests (unit or lightweight checks).',
              '- No regressions on other pages; build passes.',
              '- Include rollback notes and risk assessment.',
              '',
              '**How to run**',
              'See "Project commands" in Repo context below. If missing, add a minimal script to run/build under a new PR.',
              '',
              '**Repo context (summary)**',
              '<details><summary>Open</summary>',
              '',
              repoCtx,
              '',
              '</details>',
              '',
              '> To start Copilot coding agent: in this issue, click **Use Copilot** / **Assign to Copilot**. Copilot will plan, create a branch and PR, run tests and iterate on review feedback.',              
            ].join('\n');
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: Number(process.env.ISSUE_NUMBER), body });
