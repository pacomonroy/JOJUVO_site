name: "JSM â†’ GitHub Issue + AI Triage (requisitos + recomendaciones + SLA JSM)"

on:
  repository_dispatch:
    types: [jsm_ticket_created]
  workflow_dispatch:
    inputs:
      issue_key:
        description: "JSM key (e.g. SD-1)"
        required: false
        type: string

concurrency:
  group: jsm-${{ github.event.client_payload.issue_key || github.event.inputs.issue_key || 'manual' }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  models: read

env:
  TZ: America/Mexico_City
  JIRA_BASE_URL: https://appix.atlassian.net

jobs:
  triage:
    runs-on: ubuntu-latest
    timeout-minutes: 22

    steps:
      - name: Checkout (read-only)
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: Resolve issue key
        id: key
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.client_payload.issue_key }}" ]; then
            echo "issue_key=${{ github.event.client_payload.issue_key }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ github.event.inputs.issue_key }}" ]; then
            echo "issue_key=${{ github.event.inputs.issue_key }}" >> "$GITHUB_OUTPUT"
          else
            echo "Falta issue_key"; exit 1
          fi

      - name: Read JSM ticket
        id: jsm
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY: ${{ steps.key.outputs.issue_key }}
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
          AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"
          curl -fsS -H "Authorization: Basic $AUTH" -H "Accept: application/json" \
            "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY?expand=renderedFields&fields=summary,description,priority,reporter,attachment,issuetype,project" \
            > issue.json
          jq -re '.fields' issue.json >/dev/null
          jq -r '.renderedFields.description // ""' issue.json > description.html
          jq -r '.fields.attachment // [] | .[] | [.filename,.content,.mimeType] | @tsv' issue.json > attachments.tsv || true
          {
            echo "summary=$(jq -r '.fields.summary' issue.json)"
            echo "priority=$(jq -r '.fields.priority.name // \"Unspecified\"' issue.json)"
            echo "reporter=$(jq -r '.fields.reporter.displayName // \"Unknown\"' issue.json)"
            echo "project=$(jq -r '.fields.project.key' issue.json)"
            echo "type=$(jq -r '.fields.issuetype.name' issue.json)"
          } >> "$GITHUB_OUTPUT"

      - name: Normalize JSM description (absolute links, no inline img)
        run: |
          set -euo pipefail
          sed -E "s#(src|href)=\"\/#\\1=\"${JIRA_BASE_URL}/#g" description.html > description_abs.html
          perl -0777 -pe 's#<img[^>]+src="([^"]+)"[^>]*>#\[Imagen JSM\]\($1\)#gi' description_abs.html > description_fixed.html

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y dnsutils tesseract-ocr jq

      - name: Download image attachments + OCR
        id: ocr
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          set -euo pipefail
          AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"
          mkdir -p attachments ocr
          : > ocr/ocr.txt
          if [ -s attachments.tsv ]; then
            while IFS=$'\t' read -r NAME URL MIME; do
              case "$MIME" in
                image/*)
                  OUT="attachments/${NAME}"
                  curl -fsS -H "Authorization: Basic $AUTH" -o "$OUT" "$URL" || continue
                  tesseract "$OUT" "ocr/${NAME}" -l spa+eng --psm 6 >/dev/null 2>&1 || true
                  if [ -f "ocr/${NAME}.txt" ]; then
                    printf "%s\n" "--- ${NAME} ---" >> ocr/ocr.txt
                    cat "ocr/${NAME}.txt" >> ocr/ocr.txt
                    printf "\n" >> ocr/ocr.txt
                  fi
                  ;;
              esac
            done < attachments.tsv
          fi
          [ -s ocr/ocr.txt ] || echo "No OCR text" > ocr/ocr.txt
          echo "ocr_file=ocr/ocr.txt" >> "$GITHUB_OUTPUT"

      - name: Detect hostname (vars/desc/OCR/repo)
        id: host
        env:
          SITE_URL_VAR: ${{ vars.SITE_URL }}
        run: |
          set -euo pipefail
          pick=""
          [ -n "${SITE_URL_VAR:-}" ] && pick="$SITE_URL_VAR"
          [ -z "$pick" ] && pick="$(grep -RhoE 'https?://[a-zA-Z0-9.-]+\.[a-z]{2,}[^\" ]*' --include='*.{ts,tsx,js,jsx,json,md,astro,php,html}' -m1 || true)"
          [ -z "$pick" ] && pick="$(grep -Eo 'https?://[^ )"]+' -m1 description_fixed.html || true)"
          [ -z "$pick" ] && pick="$(grep -Eo 'https?://[^ ]+' -m1 ocr/ocr.txt || true)"
          host="$(echo "$pick" | sed -E 's#https?://##; s#/.*##; s/[^a-zA-Z0-9\.\-].*//')"
          [ -z "$host" ] && host="localhost"
          echo "host=$host" >> "$GITHUB_OUTPUT"
          echo "url_guess=$pick" >> "$GITHUB_OUTPUT"

      - name: Network diagnostics (DNS/TLS/HTTP) - safe
        id: net
        run: |
          set -euo pipefail
          HOST="${{ steps.host.outputs.host }}"
          : > netdiag.md
          echo "## Network diagnostics for $HOST" >> netdiag.md
          echo "### DNS" >> netdiag.md
          { dig +short A "$HOST"; dig +short AAAA "$HOST"; } | sed 's/^/- /' >> netdiag.md || true
          echo -e "\n### TLS (dates, issuer, subject)" >> netdiag.md
          timeout 10 bash -lc 'echo | openssl s_client -servername "$HOST" -connect "$HOST:443" 2>/dev/null | openssl x509 -noout -dates -issuer -subject' \
            | sed 's/^/  /' >> netdiag.md || echo "  (TLS check failed)" >> netdiag.md
          echo -e "\n### HTTP HEAD timings" >> netdiag.md
          curl -I --silent --show-error --connect-timeout 8 --max-time 15 "https://$HOST/" \
            -w "\ncode:%{http_code} ip:%{remote_ip} t_connect:%{time_connect}s t_ttfb:%{time_starttransfer}s\n" \
            -o >(tee headers.txt >/dev/null) >> netdiag.md || echo "Request failed (timeout/conn error)" >> netdiag.md
          if [ -f headers.txt ]; then
            echo -e "\n### Response headers (subset)" >> netdiag.md
            grep -Ei '^(server:|cf-|x-litespeed|x-cache|via:|date:|content-type:|strict-transport-security:)' headers.txt | sed 's/^/  /' >> netdiag.md || true
          fi

      - name: Build attachment list (JSM links)
        run: |
          set -euo pipefail
          if [ -s attachments.tsv ]; then
            while IFS=$'\t' read -r NAME URL MIME; do
              printf -- "- [%s](%s)\n" "$NAME" "$URL"
            done < attachments.tsv > attachments.md
          else
            printf "_Sin adjuntos_\n" > attachments.md
          fi

      - name: Repo context (tree + matches)
        id: repocontext
        env:
          SUMMARY: ${{ steps.jsm.outputs.summary }}
        run: |
          set -euo pipefail
          PLAIN_DESC="$(sed -E 's/<[^>]+>//g' description_fixed.html | tr -d '\r')"
          TOKENS="$(printf "%s\n%s\n" "${SUMMARY:-}" "${PLAIN_DESC:-}" | tr '[:upper:]' '[:lower:]' | tr -cs '[:alnum:]' '\n' | awk 'length>2' | sort -u | head -n 20 | paste -sd'|' -)"
          [ -n "$TOKENS" ] || TOKENS="."
          echo "### Repo tree (top 200)" > repo_context.md
          (git ls-files 2>/dev/null || find . -type f) | head -n 200 >> repo_context.md
          echo "" >> repo_context.md
          echo "### Keyword pattern" >> repo_context.md
          echo "$TOKENS" >> repo_context.md
          echo "" >> repo_context.md
          echo "### Matches (first 200 lines across source files)" >> repo_context.md
          find . -type d \( -name .git -o -name node_modules -o -name dist -o -name build \) -prune -o \
            -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.tsx" -o -name "*.jsx" -o -name "*.php" -o -name "*.html" -o -name "*.astro" -o -name "*.css" -o -name "*.scss" -o -name "*.vue" -o -name "*.json" -o -name "*.md" \) \
            -print0 | xargs -0 -I{} sh -c 'grep -n -i -E "$0" "{}" | head -n 2' "$TOKENS" | head -n 200 >> repo_context.md || true
          if [ -f package.json ]; then
            echo "" >> repo_context.md
            echo "### Project commands" >> repo_context.md
            echo "\`\`\`json" >> repo_context.md
            jq -r '.scripts // {}' package.json >> repo_context.md
            echo "\`\`\`" >> repo_context.md
          fi

      - name: Prepare prompt (OCR + NetDiag + repo)
        id: prep
        run: |
          set -euo pipefail
          printf "%s\n" "### Descripcion (HTML)" > prompt.md
          cat description_fixed.html >> prompt.md
          printf "\n%s\n" "### OCR de imagenes" >> prompt.md
          cat ocr/ocr.txt >> prompt.md
          printf "\n%s\n" "### Network diagnostics" >> prompt.md
          cat netdiag.md >> prompt.md 2>/dev/null || true
          printf "\n%s\n" "### Repo context" >> prompt.md
          cat repo_context.md >> prompt.md
          printf "\n%s\n" "### Labels permitidas" >> prompt.md
          echo "bug, documentation, duplicate, enhancement, good first issue, help wanted, invalid, question, wontfix" >> prompt.md

      - name: AI analysis (layered triage w/ requisitos + recomendaciones)
        id: ai
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o-mini
          system-prompt: |
            Ingeniero de soporte senior. Usa el contexto (descripcion JSM, OCR, NetDiag, repo).
            Devuelve EXACTAMENTE en Markdown:
            ## Clasificacion por capa
            - Capa sospechosa: (Cliente/Red | DNS/CDN | WAF/Seguridad | Servidor/Hosting | Aplicacion/Codigo)
            - Evidencia clave (max 5 bullets)
            - Confianza (baja/media/alta)
            ## Posible causa
            ## Solucion potencial
            ## Requisitos adicionales para replicar
            - Usuarios (no tecnicos): (detalles/datos/recursos que debemos pedir al usuario para poder replicar)
            - Equipo de TI: (detalles/datos/recursos que debemos pedir a TI/Infra para poder replicar)
            ## Recomendaciones
            - Usuarios (no tecnicos): (checklist para intentar resolver por su cuenta, si aplica)
            - Equipo de TI: (checklist para que TI pruebe acciones de mitigacion/solucion, si aplica)
            ## Riesgos/Infra (WAF/VPN/Server)

            Al final agrega un bloque ```json``` con:
            {
              "layer":"Cliente/Red|DNS/CDN|WAF/Seguridad|Servidor/Hosting|Aplicacion/Codigo",
              "cause":"...",
              "solution":"...",
              "replication_requirements_user":["..."],
              "replication_requirements_it":["..."],
              "recommendations_user":["..."],
              "recommendations_it":["..."],
              "risk_notes":"...",
              "labels":["bug","question"],
              "confidence":"baja|media|alta"
            }

            Reglas:
            - Si hay ERR_CONNECTION_TIMED_OUT/NAME_NOT_RESOLVED o NetDiag evidencia DNS/TLS/timeout, prioriza Cliente/Red, DNS/CDN o WAF/Seguridad sobre Aplicacion/Codigo.
            - No inventes datos; si falta informacion, pide lo minimo necesario para replicar de forma accionable.
          prompt-file: prompt.md
          max-tokens: 1000

      - name: Parse AI JSON
        id: parse_ai
        run: |
          set -euo pipefail
          awk '/```json/{flag=1;next}/```/{flag=0}flag' "${{ steps.ai.outputs.response-file }}" > ai.json || true
          jq -e . ai.json >/dev/null 2>&1 || echo '{}' > ai.json
          echo "json=$(cat ai.json | jq -c .)" >> "$GITHUB_OUTPUT"

      - name: Build checklists (Requisitos y Recomendaciones)
        id: ck
        run: |
          set -euo pipefail
          # Requisitos (lo que debemos pedir para replicar)
          jq -r '.replication_requirements_user // [] | .[] | "- [ ] " + .' ai.json > user_req_ck.md || true
          jq -r '.replication_requirements_it   // [] | .[] | "- [ ] " + .' ai.json > it_req_ck.md   || true
          # Recomendaciones (checklists para probar soluciones)
          jq -r '.recommendations_user // [] | .[] | "- [ ] " + .' ai.json > user_rec_ck.md || true
          jq -r '.recommendations_it   // [] | .[] | "- [ ] " + .' ai.json > it_rec_ck.md   || true

          # Fallbacks minimos
          [ -s user_req_ck.md ] || printf "%s\n" "- [ ] Screenshot de pantalla completa (incluye barra de direcciones y hora)" > user_req_ck.md
          [ -s it_req_ck.md   ] || printf "%s\n" "- [ ] Confirmar si hay mantenimiento/cambios en servidor, WAF o DNS" > it_req_ck.md
          [ -s user_rec_ck.md ] || printf "%s\n" "- [ ] Probar modo incÃ³gnito, otro navegador y sin VPN/Proxy" > user_rec_ck.md
          [ -s it_rec_ck.md   ] || printf "%s\n" "- [ ] Revisar logs del servidor y WAF/ModSecurity; validar TLS/DNS" > it_rec_ck.md

          LAYER="$(jq -r '.layer // ""' ai.json)"
          echo "layer=$LAYER" >> "$GITHUB_OUTPUT"

      - name: Fetch SLA from JSM (official API) and summarize
        id: sla
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY: ${{ steps.key.outputs.issue_key }}
        run: |
          set -euo pipefail
          AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"
          curl -fsS -H "Authorization: Basic $AUTH" -H "Accept: application/json" \
            "$JIRA_BASE_URL/rest/servicedeskapi/request/${ISSUE_KEY}/sla" > sla.json
          # Resumen legible: por cada SLA, usa ongoingCycle si existe; si no, el ultimo completedCycle
          : > sla.md
          echo "### SLA (JSM)" >> sla.md
          jq -r '
            .values[] as $v
            | $v.name as $name
            | ( ($v.ongoingCycle // empty) as $o
                | if $o != null then
                    [ $name,
                      ($o.goalDuration.friendly // ($o.goalDuration.millis|tostring)+"ms"),
                      ($o.remainingTime.friendly // "n/a"),
                      ($o.breached // false)
                    ] | @tsv
                  else
                    ( ($v.completedCycles | last) as $c
                      | [ $name,
                          ($c.goalDuration.friendly // ($c.goalDuration.millis|tostring)+"ms"),
                          "completed",
                          ($c.breached // false)
                        ] | @tsv )
                  end )' sla.json \
            | while IFS=$'\t' read -r NAME GOAL REMAIN BREACHED; do
                printf -- "- **%s** â†’ Objetivo: %s Â· Restante/Estado: %s Â· Breach: %s\n" "$NAME" "$GOAL" "$REMAIN" "$BREACHED" >> sla.md
              done
          if ! grep -q ' - ' sla.md 2>/dev/null; then
            echo "_No hay mÃ©tricas de SLA disponibles para este ticket (o falta permiso de agente)_" >> sla.md
          fi

      - name: Create Issue (JSM + IA + Requisitos + Recomendaciones + SLA JSM)
        id: create_issue
        uses: actions/github-script@v7
        env:
          ISSUE_KEY:     ${{ steps.key.outputs.issue_key }}
          SUMMARY:       ${{ steps.jsm.outputs.summary }}
          PROJECT:       ${{ steps.jsm.outputs.project }}
          TYPE:          ${{ steps.jsm.outputs.type }}
          PRIORITY:      ${{ steps.jsm.outputs.priority }}
          REPORTER:      ${{ steps.jsm.outputs.reporter }}
          AI_JSON:       ${{ steps.parse_ai.outputs.json }}
          AI_MD_FILE:    ${{ steps.ai.outputs.response-file }}
        with:
          script: |
            const fs=require('fs');
            const desc=fs.readFileSync('description_fixed.html','utf8');
            const atts=fs.readFileSync('attachments.md','utf8');
            const aiMd=fs.readFileSync(process.env.AI_MD_FILE,'utf8');
            const userReq=fs.readFileSync('user_req_ck.md','utf8');
            const itReq=fs.readFileSync('it_req_ck.md','utf8');
            const userRec=fs.readFileSync('user_rec_ck.md','utf8');
            const itRec=fs.readFileSync('it_rec_ck.md','utf8');
            const sla=fs.readFileSync('sla.md','utf8');
            const aiJson=JSON.parse(process.env.AI_JSON||'{}');

            const head=[
              '### Origen: Jira Service Management (SD)',
              `- **Ticket:** [${process.env.ISSUE_KEY}](${process.env.JIRA_BASE_URL}/browse/${process.env.ISSUE_KEY})`,
              `- **Proyecto/Tipo:** ${process.env.PROJECT} / ${process.env.TYPE}`,
              `- **Prioridad (JSM):** ${process.env.PRIORITY}`,
              `- **Reportado por:** ${process.env.REPORTER}`,
              '',
              '### Descripcion (JSM renderizada)',
              `<details><summary>Ver</summary>\n\n${desc}\n\n</details>`,
              '',
              '### Adjuntos',
              atts,
              '',
              '---',
              '## Analisis de IA'
            ].join('\n');

            const reqs=[
              '## Requisitos adicionales para replicar',
              '### Usuarios (no tecnicos)',
              userReq,
              '',
              '### Equipo de TI',
              itReq
            ].join('\n');

            const recs=[
              '## Recomendaciones',
              '### Usuarios (no tecnicos)',
              userRec,
              '',
              '### Equipo de TI',
              itRec
            ].join('\n');

            const body=[head, aiMd, reqs, recs, sla].join('\n\n');

            // aplicar labels IA existentes
            const wanted=Array.isArray(aiJson.labels)?aiJson.labels:[];
            const {data: repoLabels}=await github.rest.issues.listLabelsForRepo({
              owner:context.repo.owner, repo:context.repo.repo, per_page:200
            });
            const existing=new Set(repoLabels.map(l=>l.name.toLowerCase()));
            const extra=[...new Set(wanted.map(s=>String(s).trim()))]
              .filter(Boolean).filter(s=>existing.has(s.toLowerCase()));

            const create=await github.rest.issues.create({
              owner:context.repo.owner, repo:context.repo.repo,
              title:`[${process.env.ISSUE_KEY}] ${process.env.SUMMARY}`,
              body, labels:['from-jsm','triage','agent-ready',...extra]
            });
            core.setOutput('number', create.data.number);
            core.setOutput('layer', aiJson.layer || '');

      - name: JSM internal comment (full AI)
        env:
          JIRA_EMAIL:  ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY:   ${{ steps.key.outputs.issue_key }}
          AI_MD_FILE:  ${{ steps.ai.outputs.response-file }}
        run: |
          set -euo pipefail
          AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"
          MD="$(sed 's/\\/\\\\/g; s/"/\\"/g' "$AI_MD_FILE")"
          BODY="$(jq -n --arg md "$MD" '{body:$md, public:false}')"
          curl -fsS -X POST -H "Authorization: Basic $AUTH" -H "Content-Type: application/json" \
            --data "$BODY" "$JIRA_BASE_URL/rest/servicedeskapi/request/${ISSUE_KEY}/comment" >/dev/null

      - name: JSM public comment (si capa=Cliente/Red â†’ recomendaciones usuario)
        env:
          JIRA_EMAIL:  ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY:   ${{ steps.key.outputs.issue_key }}
          LAYER:       ${{ steps.create_issue.outputs.layer }}
        run: |
          set -euo pipefail
          if echo "${LAYER:-}" | grep -qi "Cliente/Red"; then
            AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"
            BODY="$(jq -n --arg md "$(cat user_rec_ck.md)" '{body:$md, public:true}')"
            curl -fsS -X POST -H "Authorization: Basic $AUTH" -H "Content-Type: application/json" \
              --data "$BODY" "$JIRA_BASE_URL/rest/servicedeskapi/request/${ISSUE_KEY}/comment" >/dev/null || true
          fi
