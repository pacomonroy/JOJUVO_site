name: "JSM SD to GitHub Issue + AI Triage (read-only)"

on:
  repository_dispatch:
    types: [jsm_ticket_created]
  workflow_dispatch:
    inputs:
      issue_key:
        description: "JSM key (e.g. SD-1)"
        required: false
        type: string

concurrency:
  group: jsm-${{ github.event.client_payload.issue_key || github.event.inputs.issue_key || 'manual' }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  models: read

env:
  TZ: America/Mexico_City
  JIRA_BASE_URL: https://appix.atlassian.net

jobs:
  ingest-triage:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: "Checkout (read-only)"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: "Debug payload"
        uses: actions/github-script@v7
        with:
          script: |
            core.info(`event: ${context.eventName}`);
            core.info('payload:');
            core.info(JSON.stringify(context.payload, null, 2));

      - name: "Read JSM ticket (SD-xxxx)"
        id: jsm
        shell: bash
        env:
          JIRA_EMAIL:     ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY:      ${{ github.event.client_payload.issue_key }}
          INPUT_ISSUE_KEY: ${{ github.event.inputs.issue_key }}
        run: |
          set -euo pipefail
          ISSUE_KEY="${ISSUE_KEY:-${INPUT_ISSUE_KEY:-}}"
          test -n "${ISSUE_KEY:-}" || { echo "Missing issue_key"; exit 1; }

          # Build Basic auth header (Atlassian Cloud)
          AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"

          curl -fsS \
            -H "Authorization: Basic $AUTH" \
            -H "Accept: application/json" \
            "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY?expand=renderedFields&fields=summary,description,priority,reporter,attachment,issuetype,project" \
            > issue.json

          jq -re '.fields' issue.json >/dev/null

          {
            echo "issue_key=$ISSUE_KEY"
            echo "summary=$(jq -r '.fields.summary' issue.json)"
            echo "priority=$(jq -r '.fields.priority.name // \"Unspecified\"' issue.json)"
            echo "reporter=$(jq -r '.fields.reporter.displayName // \"Unknown\"' issue.json)"
            echo "project=$(jq -r '.fields.project.key' issue.json)"
            echo "type=$(jq -r '.fields.issuetype.name' issue.json)"
          } >> "$GITHUB_OUTPUT"

          jq -r '.renderedFields.description // ""' issue.json > description.html
          jq -r '.fields.attachment // [] | .[] | [.filename,.content] | @tsv' issue.json > attachments.tsv || true

      - name: "Build attachment list (JSM links)"
        id: att
        shell: bash
        run: |
          set -euo pipefail
          if [ -s attachments.tsv ]; then
            while IFS=$'\t' read -r NAME URL; do
              printf -- "- [%s](%s)\n" "$NAME" "$URL"
            done < attachments.tsv > attachments.md
          else
            printf "_Sin adjuntos_\n" > attachments.md
          fi

      - name: "Load ops context (ops/context.md)"
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "ops/context.md" ]; then
            cp ops/context.md ops_context.md
          else
            printf "%s\n" "No hay contexto adicional (ops/context.md ausente)." > ops_context.md
          fi

      - name: "Create GitHub Issue"
        id: gh_issue
        uses: actions/github-script@v7
        env:
          ISSUE_KEY: ${{ steps.jsm.outputs.issue_key }}
          SUMMARY:   ${{ steps.jsm.outputs.summary }}
          PROJECT:   ${{ steps.jsm.outputs.project }}
          TYPE:      ${{ steps.jsm.outputs.type }}
          PRIORITY:  ${{ steps.jsm.outputs.priority }}
          REPORTER:  ${{ steps.jsm.outputs.reporter }}
        with:
          script: |
            const fs = require('fs');
            const descHtml = fs.readFileSync('description.html','utf8');
            const atts = fs.readFileSync('attachments.md','utf8');
            const body = [
              '### Origen: Jira Service Management (SD)',
              `- **Ticket:** [${process.env.ISSUE_KEY}](${process.env.JIRA_BASE_URL}/browse/${process.env.ISSUE_KEY})`,
              `- **Proyecto/Tipo:** ${process.env.PROJECT} / ${process.env.TYPE}`,
              `- **Prioridad (JSM):** ${process.env.PRIORITY}`,
              `- **Reportado por:** ${process.env.REPORTER}`,
              '',
              '### Descripcion (JSM renderizada)',
              `<details><summary>Ver</summary>\n\n${descHtml}\n\n</details>`,
              '',
              '### Adjuntos',
              atts,
              '',
              '> Generado automaticamente desde JSM (SD).'
            ].join('\n');
            const title = `[${process.env.ISSUE_KEY}] ${process.env.SUMMARY}`;
            const { data } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['from-jsm','triage']
            });
            core.setOutput('number', data.number);

      - name: "SLA: labels and deadlines (biz hours CDMX)"
        id: sla
        uses: actions/github-script@v7
        env:
          PRIORITY: ${{ steps.jsm.outputs.priority }}
          ISSUE_NUMBER: ${{ steps.gh_issue.outputs.number }}
          TZ: America/Mexico_City
        with:
          script: |
            function addBizHours(hours) {
              const tz = process.env.TZ || 'America/Mexico_City';
              const isBizDay = d => { const w = d.getDay(); return w >= 1 && w <= 5; };
              const start = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));
              const setHour = (d, h) => { d.setHours(h, 0, 0, 0); return d; };
              let d = start;
              if (d.getHours() < 9) d = setHour(d, 9);
              if (d.getHours() >= 18) { do { d.setDate(d.getDate() + 1); } while (!isBizDay(d)); d = setHour(d, 9); }
              let remaining = hours;
              while (remaining > 0) {
                if (!isBizDay(d)) { do { d.setDate(d.getDate() + 1); } while (!isBizDay(d)); d = setHour(d, 9); continue; }
                const todayLeft = 18 - d.getHours();
                const step = Math.min(remaining, todayLeft);
                d.setHours(d.getHours() + step);
                remaining -= step;
                if (remaining > 0) { do { d.setDate(d.getDate() + 1); } while (!isBizDay(d)); d = setHour(d, 9); }
              }
              return d;
            }
            const pri = (process.env.PRIORITY || '').toUpperCase();
            const map = { 'P1': { resp: 3, res: 5 }, 'P2': { resp: 6, res: 8 }, 'P3': { resp: 9, res: 27 } };
            const sev = pri.includes('CRIT') ? 'P1' : (pri.includes('ALTA') ? 'P2' : 'P3');
            const deadlines = map[sev];
            const respBy = addBizHours(deadlines.resp);
            const resoBy = addBizHours(deadlines.res);
            const fmt = d => new Intl.DateTimeFormat('es-MX', { timeZone: process.env.TZ, dateStyle: 'medium', timeStyle: 'short' }).format(d);

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.ISSUE_NUMBER),
              labels: [`sev:${sev}`]
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.ISSUE_NUMBER),
              body: `**SLA (horas habiles CDMX)**\n- Respuesta (${sev}): ${deadlines.resp}h -> **${fmt(respBy)}**\n- Resolucion (${sev}): ${deadlines.res}h -> **${fmt(resoBy)}**`
            });

      - name: "Prepare prompt for AI"
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "### Descripcion (HTML)"; cat description.html
            echo; echo "### Adjuntos"; cat attachments.md
            echo; echo "### Contexto operativo"; cat ops_context.md
            echo; echo "### SLA"; echo "- L-V 09:00-18:00 (CDMX). P1: resp<=3h/reso<=5h; P2: <=6h/<=8h; P3: <=9h/<=27h"
          } > prompt.md

      - name: "AI analysis (GitHub Models)"
        id: ai
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o-mini
          system-prompt: |
            Eres un ingeniero de soporte senior. Devuelve EXACTAMENTE estas secciones en Markdown:
            ## Posible causa
            ## Solucion potencial
            ## Requisitos adicionales para replicar
            ## Clasificacion (Bug vs Cambio)
            ## Riesgos/Infra (WAF/VPN/Server)
            Al final agrega un bloque ```json``` con:
            {"cause":"...","solution":"...","replication_requirements":["..."],"classification":"bug|change","risk_notes":"..."}
            No inventes datos; si falta informacion, pide una checklist corta.
          input-file: prompt.md

      - name: "Post AI comment in Issue"
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ steps.gh_issue.outputs.number }}
          AI_MD_FILE:   ${{ steps.ai.outputs.response-file }}
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync(process.env.AI_MD_FILE,'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.ISSUE_NUMBER),
              body
            });

      - name: "Extract JSON for public checklist"
        id: parse_ai
        shell: bash
        run: |
          set -euo pipefail
          awk '/```json/{flag=1;next}/```/{flag=0}flag' "${{ steps.ai.outputs.response-file }}" > ai.json || true
          jq -e . ai.json >/dev/null 2>&1 || echo '{}' > ai.json
          echo "json=$(cat ai.json | jq -c .)" >> "$GITHUB_OUTPUT"

      - name: "JSM internal comment (full analysis)"
        shell: bash
        env:
          JIRA_EMAIL:     ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY:      ${{ steps.jsm.outputs.issue_key }}
        run: |
          set -euo pipefail
          AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"
          MD="$(sed 's/\\/\\\\/g; s/"/\\"/g' "${{ steps.ai.outputs.response-file }}")"
          BODY="$(jq -n --arg md "$MD" '{body:$md, public:false}')"
          curl -fsS -X POST \
            -H "Authorization: Basic $AUTH" \
            -H "Content-Type: application/json" \
            --data "$BODY" \
            "$JIRA_BASE_URL/rest/servicedeskapi/request/${ISSUE_KEY}/comment" >/dev/null

      - name: "JSM public comment (checklist only, if any)"
        if: ${{ steps.parse_ai.outputs.json != '' }}
        shell: bash
        env:
          JIRA_EMAIL:     ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY:      ${{ steps.jsm.outputs.issue_key }}
        run: |
          set -euo pipefail
          AUTH="$(printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64 -w 0 2>/dev/null || printf "%s:%s" "$JIRA_EMAIL" "$JIRA_API_TOKEN" | base64)"
          reqs="$(jq -r '.replication_requirements // [] | map("- " + .) | join("\n")' ai.json)"
          if [ -n "$reqs" ]; then
            msg="Para avanzar mas rapido, por favor ayudanos con:\n${reqs}"
            BODY="$(jq -n --arg md "$msg" '{body:$md, public:true}')"
            curl -fsS -X POST \
              -H "Authorization: Basic $AUTH" \
              -H "Content-Type: application/json" \
              --data "$BODY" \
              "$JIRA_BASE_URL/rest/servicedeskapi/request/${ISSUE_KEY}/comment" >/dev/null || true
          fi
